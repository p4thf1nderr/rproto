// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.13.0
// source: api/pdfcompose.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	PDFComposeService_Send_FullMethodName = "/pdfcompose.PDFComposeService/Send"
)

// PDFComposeServiceClient is the client API for PDFComposeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PDFComposeServiceClient interface {
	Send(ctx context.Context, opts ...grpc.CallOption) (PDFComposeService_SendClient, error)
}

type pDFComposeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPDFComposeServiceClient(cc grpc.ClientConnInterface) PDFComposeServiceClient {
	return &pDFComposeServiceClient{cc}
}

func (c *pDFComposeServiceClient) Send(ctx context.Context, opts ...grpc.CallOption) (PDFComposeService_SendClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &PDFComposeService_ServiceDesc.Streams[0], PDFComposeService_Send_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &pDFComposeServiceSendClient{ClientStream: stream}
	return x, nil
}

type PDFComposeService_SendClient interface {
	Send(*SendIn) error
	Recv() (*SendOut, error)
	grpc.ClientStream
}

type pDFComposeServiceSendClient struct {
	grpc.ClientStream
}

func (x *pDFComposeServiceSendClient) Send(m *SendIn) error {
	return x.ClientStream.SendMsg(m)
}

func (x *pDFComposeServiceSendClient) Recv() (*SendOut, error) {
	m := new(SendOut)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PDFComposeServiceServer is the server API for PDFComposeService service.
// All implementations must embed UnimplementedPDFComposeServiceServer
// for forward compatibility
type PDFComposeServiceServer interface {
	Send(PDFComposeService_SendServer) error
	mustEmbedUnimplementedPDFComposeServiceServer()
}

// UnimplementedPDFComposeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPDFComposeServiceServer struct {
}

func (UnimplementedPDFComposeServiceServer) Send(PDFComposeService_SendServer) error {
	return status.Errorf(codes.Unimplemented, "method Send not implemented")
}
func (UnimplementedPDFComposeServiceServer) mustEmbedUnimplementedPDFComposeServiceServer() {}

// UnsafePDFComposeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PDFComposeServiceServer will
// result in compilation errors.
type UnsafePDFComposeServiceServer interface {
	mustEmbedUnimplementedPDFComposeServiceServer()
}

func RegisterPDFComposeServiceServer(s grpc.ServiceRegistrar, srv PDFComposeServiceServer) {
	s.RegisterService(&PDFComposeService_ServiceDesc, srv)
}

func _PDFComposeService_Send_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PDFComposeServiceServer).Send(&pDFComposeServiceSendServer{ServerStream: stream})
}

type PDFComposeService_SendServer interface {
	Send(*SendOut) error
	Recv() (*SendIn, error)
	grpc.ServerStream
}

type pDFComposeServiceSendServer struct {
	grpc.ServerStream
}

func (x *pDFComposeServiceSendServer) Send(m *SendOut) error {
	return x.ServerStream.SendMsg(m)
}

func (x *pDFComposeServiceSendServer) Recv() (*SendIn, error) {
	m := new(SendIn)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PDFComposeService_ServiceDesc is the grpc.ServiceDesc for PDFComposeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PDFComposeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pdfcompose.PDFComposeService",
	HandlerType: (*PDFComposeServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Send",
			Handler:       _PDFComposeService_Send_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api/pdfcompose.proto",
}
