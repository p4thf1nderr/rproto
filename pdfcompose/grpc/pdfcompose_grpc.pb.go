// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.13.0
// source: api/pdfcompose.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	PDFComposeService_Send_FullMethodName = "/pdfcompose.PDFComposeService/Send"
)

// PDFComposeServiceClient is the client API for PDFComposeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PDFComposeServiceClient interface {
	Send(ctx context.Context, in *SendIn, opts ...grpc.CallOption) (*SendOut, error)
}

type pDFComposeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPDFComposeServiceClient(cc grpc.ClientConnInterface) PDFComposeServiceClient {
	return &pDFComposeServiceClient{cc}
}

func (c *pDFComposeServiceClient) Send(ctx context.Context, in *SendIn, opts ...grpc.CallOption) (*SendOut, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendOut)
	err := c.cc.Invoke(ctx, PDFComposeService_Send_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PDFComposeServiceServer is the server API for PDFComposeService service.
// All implementations must embed UnimplementedPDFComposeServiceServer
// for forward compatibility
type PDFComposeServiceServer interface {
	Send(context.Context, *SendIn) (*SendOut, error)
	mustEmbedUnimplementedPDFComposeServiceServer()
}

// UnimplementedPDFComposeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPDFComposeServiceServer struct {
}

func (UnimplementedPDFComposeServiceServer) Send(context.Context, *SendIn) (*SendOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Send not implemented")
}
func (UnimplementedPDFComposeServiceServer) mustEmbedUnimplementedPDFComposeServiceServer() {}

// UnsafePDFComposeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PDFComposeServiceServer will
// result in compilation errors.
type UnsafePDFComposeServiceServer interface {
	mustEmbedUnimplementedPDFComposeServiceServer()
}

func RegisterPDFComposeServiceServer(s grpc.ServiceRegistrar, srv PDFComposeServiceServer) {
	s.RegisterService(&PDFComposeService_ServiceDesc, srv)
}

func _PDFComposeService_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PDFComposeServiceServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PDFComposeService_Send_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PDFComposeServiceServer).Send(ctx, req.(*SendIn))
	}
	return interceptor(ctx, in, info, handler)
}

// PDFComposeService_ServiceDesc is the grpc.ServiceDesc for PDFComposeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PDFComposeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pdfcompose.PDFComposeService",
	HandlerType: (*PDFComposeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Send",
			Handler:    _PDFComposeService_Send_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/pdfcompose.proto",
}
